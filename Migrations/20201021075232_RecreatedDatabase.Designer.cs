// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportActivities.Data;

namespace SportActivities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201021075232_RecreatedDatabase")]
    partial class RecreatedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a4280b6a-0653-4cbd-a0p6-f1701e926e73",
                            ConcurrencyStamp = "120c15b9-b72f-4cd6-b315-f99f292b39cb",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c9280b6a-0613-4cbd-a9e6-f1701e926e73",
                            ConcurrencyStamp = "bfcfd474-993d-4f80-84bd-cf5bb9b07dbb",
                            Name = "basic",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            RoleId = "a4280b6a-0653-4cbd-a0p6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "b4280b6a-0613-4ciod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "b4280b6a-0613-4cbd-ae6-f1701e926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "g4280b6a-0613-4awod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "5t280b6a-0613-4awod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "bhd80b6a-0613-6awod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "acd80b6a-0613-4awod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        },
                        new
                        {
                            UserId = "9cd80b6a-0613-8awod-a9e6-f1702f926e73",
                            RoleId = "c9280b6a-0613-4cbd-a9e6-f1701e926e73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SportActivities.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            Name = "7Card",
                            Status = true
                        },
                        new
                        {
                            ActivityId = 2,
                            Name = "Belaqva",
                            Status = true
                        },
                        new
                        {
                            ActivityId = 3,
                            Name = "Paradisul Acvatic",
                            Status = true
                        },
                        new
                        {
                            ActivityId = 4,
                            Name = "Parc Aventura",
                            Status = true
                        },
                        new
                        {
                            ActivityId = 5,
                            Name = "Inot",
                            Status = false
                        },
                        new
                        {
                            ActivityId = 6,
                            Name = "Bowling",
                            Status = false
                        },
                        new
                        {
                            ActivityId = 7,
                            Name = "Tenis"
                        },
                        new
                        {
                            ActivityId = 8,
                            Name = "Ping Pong"
                        });
                });

            modelBuilder.Entity("SportActivities.Models.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultActivityId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FirstActivityId")
                        .HasColumnType("int");

                    b.HasKey("ChoiceId");

                    b.HasIndex("DefaultActivityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirstActivityId");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            ChoiceId = 1,
                            Date = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultActivityId = 2,
                            EmployeeId = "b4280b6a-0613-4cbd-ae6-f1701e926e73",
                            FirstActivityId = 7
                        },
                        new
                        {
                            ChoiceId = 2,
                            Date = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultActivityId = 1,
                            EmployeeId = "g4280b6a-0613-4awod-a9e6-f1702f926e73",
                            FirstActivityId = 6
                        },
                        new
                        {
                            ChoiceId = 3,
                            Date = new DateTime(2020, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "5t280b6a-0613-4awod-a9e6-f1702f926e73",
                            FirstActivityId = 5
                        },
                        new
                        {
                            ChoiceId = 4,
                            Date = new DateTime(2020, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultActivityId = 2,
                            EmployeeId = "acd80b6a-0613-4awod-a9e6-f1702f926e73"
                        },
                        new
                        {
                            ChoiceId = 5,
                            Date = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "bhd80b6a-0613-6awod-a9e6-f1702f926e73",
                            FirstActivityId = 4
                        },
                        new
                        {
                            ChoiceId = 6,
                            Date = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "9cd80b6a-0613-8awod-a9e6-f1702f926e73",
                            FirstActivityId = 7
                        });
                });

            modelBuilder.Entity("SportActivities.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c46b9ba-754e-4396-a750-1bcee5e3a216",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGL1E/zBpsTBuqPp7wUs3phIPEi+8Mc27qo9GGhHgRkY774Mj1L2xjsP3ek9r74rsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60a206da-de02-4c8e-ae0c-2c2185cb9605",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4ciod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89bf9b6e-8450-46d3-a636-e78706cf46cc",
                            Email = "basic@basic.com",
                            EmailConfirmed = true,
                            FirstName = "Basic",
                            LastName = "Basic",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@BASIC.COM",
                            NormalizedUserName = "BASIC@BASIC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB2Tgv8BXgwTeIDjN/y/Q0YEbX7txI6gvF+x7JdTwjpb1+ziO7v96qagX/Piyl3otg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "132efc1a-1a58-4060-b304-c2d8f6ddd6d0",
                            TwoFactorEnabled = false,
                            UserName = "basic@basic.com"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-ae6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3e543ab-5236-4bbb-949c-fbcf915e9756",
                            Email = "a.popescu@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Andrei",
                            LastName = "Popescu",
                            LockoutEnabled = false,
                            NormalizedEmail = "A.POPESCU@PEOPLEPOWER.RO",
                            NormalizedUserName = "A.POPESCU@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEHfzbb9mrm654fsFlKhG35iu8pd1SUuEgjpOdUQO9z7PJcjhcddxe8YuKxWqEXjCmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59dc0375-6455-496b-b583-04b74fbcd034",
                            TwoFactorEnabled = false,
                            UserName = "a.popescu@peoplepower.ro"
                        },
                        new
                        {
                            Id = "g4280b6a-0613-4awod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90cdddca-3c7d-4212-aa1c-13fb72013e83",
                            Email = "m.gheorghe@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Maria",
                            LastName = "Gheorghe",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.GHEORGHE@PEOPLEPOWER.RO",
                            NormalizedUserName = "M.GHEORGHE@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGC3sIIY6EkuWC0XmbU3Ph+rV0xbdhcTqYUzpuUVMcxwnE4XO78YlTtldITkRjocQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e201592-9388-4e0e-b099-799ff1eaf63a",
                            TwoFactorEnabled = false,
                            UserName = "m.gheorghe@peoplepower.ro"
                        },
                        new
                        {
                            Id = "5t280b6a-0613-4awod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b94f045-a58a-4458-833c-8d81052d7a71",
                            Email = "i.stanescu@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Ionut",
                            LastName = "Stanescu",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.STANESCU@PEOPLEPOWER.RO",
                            NormalizedUserName = "I.STANESCU@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZzcish5FGN6LEUPhPRUAgmjhscV1mczkLSeUYf/Q425YrwO3/GWUtBKlk+Itqbiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad393d34-4307-4c04-b3f1-28804f1950cc",
                            TwoFactorEnabled = false,
                            UserName = "i.stanescu@peoplepower.ro"
                        },
                        new
                        {
                            Id = "acd80b6a-0613-4awod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f97614e-ca7f-48e3-8693-c752dabd551f",
                            Email = "m.istrate@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Mircea",
                            LastName = "Istrate",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.ISTRATE@PEOPLEPOWER.RO",
                            NormalizedUserName = "M.ISTRATE@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEALD2Dtxf5IfAzWER6EZQ4kvmw+tFo2tVLWGP3wSPQJ7lWpftzpTkOTveIo7tGV8+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cfbfaa0-1167-4062-8afc-c09a7245b4d5",
                            TwoFactorEnabled = false,
                            UserName = "m.istrate@peoplepower.ro"
                        },
                        new
                        {
                            Id = "bhd80b6a-0613-6awod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a101ec8-a62a-4755-8a75-2ba3bf821e29",
                            Email = "m.eremia@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Marian",
                            LastName = "Eremia",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.EREMIA@PEOPLEPOWER.RO",
                            NormalizedUserName = "M.EREMIA@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEDT83rmCY1OPJkw8pXRi747BbKxxTooU/xvf9pLKO5Z/XPMgZoOdbichLCXZJfYL7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a80e500b-5de3-45c2-8651-0c4a139d08c1",
                            TwoFactorEnabled = false,
                            UserName = "m.eremia@peoplepower.ro"
                        },
                        new
                        {
                            Id = "9cd80b6a-0613-8awod-a9e6-f1702f926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9449877a-ccc5-41a5-8b69-c09c874cc1d2",
                            Email = "i.pop@peoplepower.ro",
                            EmailConfirmed = true,
                            FirstName = "Ilinca",
                            LastName = "Pop",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.POP@PEOPLEPOWER.RO",
                            NormalizedUserName = "I.POP@PEOPLEPOWER.RO",
                            PasswordHash = "AQAAAAEAACcQAAAAEOmyw1+XTComReasOFQeyM8KDIQvxWkEKihhyNwDmBUVk3B2Cs12EO5Cv7f0GClqjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1c94940-1bb0-4f0d-8e31-460fb6ab5742",
                            TwoFactorEnabled = false,
                            UserName = "i.pop@peoplepower.ro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportActivities.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportActivities.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportActivities.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportActivities.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportActivities.Models.Choice", b =>
                {
                    b.HasOne("SportActivities.Models.Activity", "DefaultActivity")
                        .WithMany("DefaultChoices")
                        .HasForeignKey("DefaultActivityId");

                    b.HasOne("SportActivities.Models.Employee", "Employee")
                        .WithMany("Choices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportActivities.Models.Activity", "FirstActivity")
                        .WithMany("FirstChoices")
                        .HasForeignKey("FirstActivityId");
                });
#pragma warning restore 612, 618
        }
    }
}
